Что такое Java?
Java – широко используемый язык программирования для написания интернет-приложений. Язык Java широко использовался на протяжении более двух десятилетий. Миллионы приложений Java используются и сегодня. Java – это многоплатформенный, объектно-ориентированный и сетецентрический язык, который сам по себе может использоваться как платформа. Это быстрый, безопасный и надежный язык программирования для всего: от мобильных приложений и корпоративного ПО до приложений для работы с большими данными и серверных технологий.

Для чего используется язык программирования Java?
Поскольку Java является бесплатным и универсальным языком, на нем создаются локализованные и распространяемые программы. Типичные примеры использования Java см. ниже.
Разработка игр. Многие популярные мобильные, компьютерные и видеоигры созданы на Java. Даже современные игры, в которых используются передовые технологии, такие как машинное обучение или виртуальная реальность, создаются с использованием технологии Java.
Облачные вычисления. Язык Java часто называют WORA (Write Once and Run Anywhere – «Напиши один раз, запускай где угодно»), что делает его идеальным для децентрализованных облачных приложений. Поставщики облачных услуг выбирают язык Java для запуска программ на широком спектре базовых платформ.
Большие данные. Язык Java используется для механизмов обработки данных, которые могут работать со сложными наборами данных и большими объемами данных в режиме реального времени.
Искусственный интеллект. Java – это кладезь библиотек машинного обучения. Благодаря стабильности и скорости языка является выбором № 1 для разработки приложений искусственного интеллекта, таких как обработка естественного языка и глубокое обучение.
Интернет вещей. Язык Java используется для программирования датчиков и аппаратного обеспечения периферийных устройств, которые могут независимо подключаться к Интернету.
Почему язык Java так популярен среди современных разработчиков ПО?
Секрет популярности Java заключается в простоте его использования. Некоторые причины, по которым разработчики предпочитают Java другим языкам программирования см. ниже.

Высококачественные учебные ресурсы
Поскольку Java существует уже давно, для новых программистов доступно множество учебных ресурсов. Подробная документация, исчерпывающие печатные материалы и курсы помогают разработчикам на протяжении всего обучения. Кроме того, новички могут начать писать код на Core Java, прежде чем переходить на Advanced Java.

Встроенные функции и библиотеки
При использовании Java разработчикам не нужно каждый раз писать новую функцию с нуля. В качестве альтернативы Java предоставляет богатую экосистему встроенных функций и библиотек для разработки ряда приложений.

Активная поддержка сообщества
У Java много активных пользователей и сообщество, которое может поддержать разработчиков, когда они сталкиваются с трудностями при написании кода. ПО платформы Java также регулярно поддерживается и обновляется.
Высококачественные инструменты разработки
Язык Java предлагает различные инструменты для поддержки автоматизированного редактирования, отладки, тестирования, развертывания и управления изменениями. Эти инструменты делают программирование на Java экономичным и быстрым.

Независимая платформа
Код Java может работать на любой базовой платформе, такой как Windows, Linux, iOS или Android, без перезаписи. Таким образом, язык особенно эффективен в современной среде, где приложения запускаются на нескольких устройствах.

Безопасность
Пользователи могут загружать ненадежный код Java по сети и запускать его в безопасной среде, в которой он не может причинить никакого вреда. Ненадежный код не может заразить хост-систему вирусом, а также не может читать или записывать файлы с жесткого диска. Уровни безопасности и ограничения в Java также легко настраиваются.

Как работает Java?
Все языки программирования являются средством общения с машинами. Аппаратное обеспечение машины реагирует только на электронную связь. Языки программирования высокого уровня, такие как Java, играют роль моста между человеческим и аппаратным языком. Для использования Java разработчики должны понимать две вещи.
Язык Java и API. Это внешний интерфейс между разработчиком и платформой Java.
Виртуальная машина Java. Это внутренняя связь между платформой Java и базовым аппаратным оборудованием. Подробное описание см. ниже.

Что такое Java API?
Java определяет синтаксис и семантику языка программирования Java. Это включает в себя базовый словарь и правила, используемые для написания алгоритмов, таких как неизменяемые типы данных, блоки if и else, циклы и т. д. API-интерфейсы являются важными программными компонентами, связанными с платформой Java. Это предварительно написанные Java-программы, которые могут встраивать и воспроизводить существующие функции в используемом коде. Например, API-интерфейсы Java можно использовать для получения даты и времени, выполнения математических операций или управления текстом. Любой код приложения Java, написанный разработчиком, обычно сочетает в себе новый и уже существующий код из API-интерфейсов Java и библиотек Java.

Что такое виртуальная машина Java?
Виртуальная машина Java действует как дополнительный уровень абстракции между платформой Java и базовым аппаратным обеспечением машины. Исходный код Java может работать только на тех машинах, на которых установлена виртуальная машина Java (Java Virtual Machine, JVM). Ответ на вопрос, зачем нужна виртуальная машина Java, лежит в истории программирования.

История программирования
Когда естественные языки программирования были впервые разработаны, они подразделялись на две большие категории в зависимости от того, как они взаимодействовали с базовым оборудованием.
Компилирующие программы. Вся программа написана в естественном английском синтаксисе с помощью компилирующих программ, а затем язык компилирует (или переводит) весь код в машинный код. После этого скомпилированный код запускается на оборудовании.
Интерпретирующие программы. С помощью интерпретирующих программ каждое высокоуровневое выражение кода интерпретируется в машинный код в режиме реального времени.  Зафиксированные предписания немедленно выполняются аппаратным обеспечением перед просмотром следующего предписания.

Среда времени исполнение Java
Программа Java была первым языком, объединившим оба описанных выше метода с использованием JVM. Компилятор кода Java называется виртуальной машиной Java. Любой файл Java сначала компилируется в байт-код. Байт-код Java может работать только в JVM. Затем JVM интерпретирует байт-код для запуска на базовой аппаратной платформе. Поэтому, если приложение работает на компьютере с Windows, JVM интерпретирует его для Windows. Однако при работе на платформе с открытым исходным кодом, такой как Linux, JVM интерпретирует его для Linux.

Как программировать на Java?
Чтобы начать программировать на Java, необходимо установить Java Edition в системе. Существует четыре основные версии Java:
Стандартная версия Java (Java standard edition, Java SE);
Корпоративная версия Java (Java enterprise edition, Java EE);
Микро-версия Java (Java micro edition, Java ME).

Что такое Java SE?
Стандартная версия Java – это основная платформа программирования Java. Такая версия содержит все библиотеки и API, которые нужны любому программисту для разработки на Java. Open Java Development Kit (OpenJDK) – это бесплатная реализация Java SE с открытым исходным кодом.
Amazon Corretto – это бесплатная многоплатформенная готовая к использованию версия пакета средств разработки OpenJDK. Сервис можно использовать в качестве замены для многих дистрибутивов Java SE, при этом он поставляется с бесплатной долгосрочной поддержкой Amazon. Сервис позволяет запускать одну и ту же среду в облаке, локально и на локальном компьютере.

Что такое Java EE?
Корпоративная версия Java включает в себя все функции Java SE и дополнительные функции для развертывания отказоустойчивого распределенного многоуровневого ПО Java. Приложения, требующие огромного масштаба, распределенной системы, доступа к базе данных и веб-сервисов, обычно разрабатываются на Java EE.

Что такое Java ME?
Микро-версия Java – это платформа для разработки приложений для мобильных устройств и встраиваемых систем, таких как ТВ-приставки. Java ME предоставляет подмножество функций Java SE, но также включает библиотеки, специфичные для мобильных устройств.